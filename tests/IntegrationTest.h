#pragma once

#include <doctest.h>
#include "TestMacros.h"
#include "TestUtils.h"


#include "src/SimulationConfiguration.h"
#include "src/scattering/Simulation.h"

#include <vector>

SampleResult GetSample(Simulation &sim, const Grid& grid, const SimulationConfiguration& cfg, const bool coherent)
{
	SampleResult sample_result(cfg.temperatures.size(), cfg.magnetic_fields.size());

	sim.InitSample(grid, cfg.settings, true);
	Metrics metrics;

	for (int j = 0; j < cfg.magnetic_fields.size(); j++) {
		sim.ComputeLifetimes(cfg.magnetic_fields[j], grid, metrics);

		for (int i = 0; i < cfg.temperatures.size(); i++) {
			sample_result.results[i][j] = sim.DeriveTemperature(cfg.temperatures[i]).result;
		}
	}

	return sample_result;
}

void RunTestSample(const std::string file_path, const std::vector<DataRow> &expected_results)
{
	SimulationCPU sim(31, 7);

	auto cfg = SimulationConfiguration::ParseFromeFile("tests/data/test_impurities2.config");

	auto impurities = GetTestImpurities("tests/data/test_impurities2.dat");
	REQUIRE(impurities.size() > 0);

	auto s = cfg.settings;
	auto grid = Grid(impurities, s.region_size, s.region_extends, s.impurity_radius, s.max_expected_impurities_in_cell);

	auto results_coh = GetSample(sim, grid, cfg, true);
	auto results_inc = GetSample(sim, grid, cfg, false);

	for (int i = 0; i < cfg.temperatures.size(); i++) {
		for (int j = 0; j < cfg.magnetic_fields.size(); j++) {
			DataRow row(cfg.temperatures[i], cfg.magnetic_fields[j], results_coh.results[i][j], results_inc.results[i][j]);

			auto expected_row = expected_results[j * cfg.temperatures.size() + i];
			//printf("(%i, %i), mf (%.2f, %.2f), tmp (%.2f, %.2f)\n", i, j, row.magnetic_field, expected_row.magnetic_field, row.temperature, expected_row.temperature);
			REQUIRE(row.temperature    == expected_row.temperature);
			REQUIRE(row.magnetic_field == expected_row.magnetic_field);

			CHECK_ALMOST(row.coherent.xx, expected_row.coherent.xx);
			CHECK_ALMOST(row.coherent.xy, expected_row.coherent.xy);
			CHECK_ALMOST(row.incoherent.xx, expected_row.incoherent.xx);
			CHECK_ALMOST(row.incoherent.xy, expected_row.incoherent.xy);
		}
	}
}

TEST_CASE("Integration Test")
{
	SUBCASE("File 1")
	{
		std::vector<DataRow> expected_results {
			DataRow(0.01, 0.01,               Sigma(0.009857016921144853, 0.005421870704689025), Sigma(4.572758584078713e-05,   1.3874587379980529e-05)),
			DataRow(0.1,  0.01,               Sigma(0.009857016921144853, 0.00541861020189183),  Sigma(4.572758584078713e-05,    1.385692437778361e-05)),
			DataRow(1,    0.01,               Sigma(0.009857016921144853, 0.00538620965390081),  Sigma(4.572758584078713e-05,    1.3682000935541741e-05)),
			DataRow(10,   0.01,               Sigma(0.009857016921144853, 0.005081482126051374), Sigma(4.572758584078713e-05,   1.2090608956320854e-05)),
			DataRow(100,  0.01,               Sigma(0.009857016921144853, 0.0032250464165468205), Sigma(4.572758584078713e-05,  4.577896100427703e-06)),
			DataRow(0.01, 12.008000000000001, Sigma(0.009876543377220222, 0.005356083553582879), Sigma(0.00018249377268590415,  0.00011628431998172508)),
			DataRow(0.1,  12.008000000000001, Sigma(0.009876543377220222, 0.005352951720472671), Sigma(0.00018249377268590415,  0.00011616007789060324)),
			DataRow(1,    12.008000000000001, Sigma(0.009876543377220222, 0.005321821933522665), Sigma(0.00018249377268590415,  0.00011492782764273585)),
			DataRow(10,   12.008000000000001, Sigma(0.009876543377220222, 0.005028343414908954), Sigma(0.00018249377268590415,  0.00010355627547384142)),
			DataRow(100,  12.008000000000001, Sigma(0.009876543377220222, 0.0032141974634319033), Sigma(0.00018249377268590415, 4.445491741376619e-05)),
			DataRow(0.01, 24.006000000000004, Sigma(0.009920853142984727, 0.005203246854704575), Sigma(0.0003723064165819742,   0.0002146780482814134)),
			DataRow(0.1,  24.006000000000004, Sigma(0.009920853142984727, 0.005200388593776318), Sigma(0.0003723064165819742,   0.00021444725377050866)),
			DataRow(1,    24.006000000000004, Sigma(0.009920853142984727, 0.005171965521357873), Sigma(0.0003723064165819742,   0.00021216012142625333)),
			DataRow(10,   24.006000000000004, Sigma(0.009920853142984727, 0.004902869498293891), Sigma(0.0003723064165819742,   0.00019120238574605447)),
			DataRow(100,  24.006000000000004, Sigma(0.009920853142984727, 0.003190348641230752), Sigma(0.0003723064165819742,   8.377712702203808e-05)),
			DataRow(0.01, 36.004,             Sigma(0.009860902664892406, 0.005009708300039989), Sigma(0.0005984329273505866,   0.0002873949866693553)),
			DataRow(0.1,  36.004,             Sigma(0.009860902664892406, 0.005007109855566214), Sigma(0.0005984329273505866,   0.0002871159531467466)),
			DataRow(1,    36.004,             Sigma(0.009860902664892406, 0.004981262188399718), Sigma(0.0005984329273505866,   0.0002843467087278747)),
			DataRow(10,   36.004,             Sigma(0.009860902664892406, 0.004735803058065536), Sigma(0.0005984329273505866,   0.0002586332075062396)),
			DataRow(100,  36.004,             Sigma(0.009860902664892406, 0.0031404988459557497), Sigma(0.0005984329273505866,  0.00011855497635724954)),
			DataRow(0.01, 48.002,             Sigma(0.009882936083921136, 0.004812580243467858), Sigma(0.0008190941326993478,   0.0003448026577903055)),
			DataRow(0.1,  48.002,             Sigma(0.009882936083921136, 0.004810212807123836), Sigma(0.0008190941326993478,   0.0003444827706736765)),
			DataRow(1,    48.002,             Sigma(0.009882936083921136, 0.004786656408979896), Sigma(0.0008190941326993478,   0.00034130691389903017)),
			DataRow(10,   48.002,             Sigma(0.009882936083921136, 0.004562353749059845), Sigma(0.0008190941326993478,   0.00031171596660274593)),
			DataRow(100,  48.002,             Sigma(0.009882936083921136, 0.003077705187717237), Sigma(0.0008190941326993478,   0.00014709594663939578)),
			DataRow(0.01, 60.0,               Sigma(0.009878102506358698, 0.004596772094069146), Sigma(0.0010312090635676762,   0.000381714185187479)),
			DataRow(0.1,  60.0,               Sigma(0.009878102506358698, 0.004594637484306804), Sigma(0.0010312090635676762,   0.00038138908308156343)),
			DataRow(1,    60.0,               Sigma(0.009878102506358698, 0.004573391506323413), Sigma(0.0010312090635676762,   0.00037815906653701926)),
			DataRow(10,   60.0,               Sigma(0.009878102506358698, 0.004370517626464682), Sigma(0.0010312090635676762,   0.0003478515117667879)),
			DataRow(100,  60.0,               Sigma(0.009878102506358698, 0.003000867353579202), Sigma(0.0010312090635676762,   0.00017148615110263807))
		};

		RunTestSample("tests/data/test_impurities.config", expected_results);
	}

	SUBCASE("File 2")
	{
		std::vector<DataRow> expected_results{
			DataRow(0.01, 0.01,				  Sigma(0.006471334139608506,  0.005421870704689025),  Sigma(1.1115892030833952e-05, 1.3874587379980529e-05)),
			DataRow(0.1,  0.01,				  Sigma(0.006471334139608506,  0.00541861020189183),   Sigma(1.1115892030833952e-05, 1.385692437778361e-05)),
			DataRow(1,    0.01,				  Sigma(0.006471334139608506,  0.00538620965390081),   Sigma(1.1115892030833952e-05, 1.3682000935541741e-05)),
			DataRow(10,   0.01,				  Sigma(0.006471334139608506,  0.005081482126051374),  Sigma(1.1115892030833952e-05, 1.2090608956320854e-05)),
			DataRow(100,  0.01,				  Sigma(0.006471334139608506,  0.0032250464165468205), Sigma(1.1115892030833952e-05, 4.577896100427703e-06)),
			DataRow(0.01, 12.008000000000001, Sigma(0.0064772755206588505, 0.005356083553582879),  Sigma(9.63144138679023e-05,   0.00011628431998172508)),
			DataRow(0.1,  12.008000000000001, Sigma(0.0064772755206588505, 0.005352951720472671),  Sigma(9.63144138679023e-05,   0.00011616007789060324)),
			DataRow(1,    12.008000000000001, Sigma(0.0064772755206588505, 0.005321821933522665),  Sigma(9.63144138679023e-05,   0.00011492782764273585)),
			DataRow(10,   12.008000000000001, Sigma(0.0064772755206588505, 0.005028343414908954),  Sigma(9.63144138679023e-05,   0.00010355627547384142)),
			DataRow(100,  12.008000000000001, Sigma(0.0064772755206588505, 0.0032141974634319033), Sigma(9.63144138679023e-05,   4.445491741376619e-05)),
			DataRow(0.01, 24.006000000000004, Sigma(0.006478804618951434,  0.005203246854704575),  Sigma(0.00018003465147269378, 0.0002146780482814134)),
			DataRow(0.1,  24.006000000000004, Sigma(0.006478804618951434,  0.005200388593776318),  Sigma(0.00018003465147269378, 0.00021444725377050866)),
			DataRow(1,    24.006000000000004, Sigma(0.006478804618951434,  0.005171965521357873),  Sigma(0.00018003465147269378, 0.00021216012142625333)),
			DataRow(10,   24.006000000000004, Sigma(0.006478804618951434,  0.004902869498293891),  Sigma(0.00018003465147269378, 0.00019120238574605447)),
			DataRow(100,  24.006000000000004, Sigma(0.006478804618951434,  0.003190348641230752),  Sigma(0.00018003465147269378, 8.377712702203808e-05)),
			DataRow(0.01, 36.004,			  Sigma(0.006468401776801303,  0.005009708300039989),  Sigma(0.0002771095930591384,  0.0002873949866693553)),
			DataRow(0.1,  36.004,			  Sigma(0.006468401776801303,  0.005007109855566214),  Sigma(0.0002771095930591384,  0.0002871159531467466)),
			DataRow(1,    36.004,			  Sigma(0.006468401776801303,  0.004981262188399718),  Sigma(0.0002771095930591384,  0.0002843467087278747)),
			DataRow(10,   36.004,			  Sigma(0.006468401776801303,  0.004735803058065536),  Sigma(0.0002771095930591384,  0.0002586332075062396)),
			DataRow(100,  36.004,			  Sigma(0.006468401776801303,  0.0031404988459557497), Sigma(0.0002771095930591384,  0.00011855497635724954)),
			DataRow(0.01, 48.002,			  Sigma(0.006470561877325922,  0.004812580243467858),  Sigma(0.0003711075745756901,  0.0003448026577903055)),
			DataRow(0.1,  48.002,			  Sigma(0.006470561877325922,  0.004810212807123836),  Sigma(0.0003711075745756901,  0.0003444827706736765)),
			DataRow(1,    48.002,			  Sigma(0.006470561877325922,  0.004786656408979896),  Sigma(0.0003711075745756901,  0.00034130691389903017)),
			DataRow(10,   48.002,			  Sigma(0.006470561877325922,  0.004562353749059845),  Sigma(0.0003711075745756901,  0.00031171596660274593)),
			DataRow(100,  48.002,			  Sigma(0.006470561877325922,  0.003077705187717237),  Sigma(0.0003711075745756901,  0.00014709594663939578)),
			DataRow(0.01, 60.0,				  Sigma(0.006470755651288166,  0.004596772094069146),  Sigma(0.00047037649257739277, 0.000381714185187479)),
			DataRow(0.1,  60.0,				  Sigma(0.006470755651288166,  0.004594637484306804),  Sigma(0.00047037649257739277, 0.00038138908308156343)),
			DataRow(1,    60.0,				  Sigma(0.006470755651288166,  0.004573391506323413),  Sigma(0.00047037649257739277, 0.00037815906653701926)),
			DataRow(10,   60.0,				  Sigma(0.006470755651288166,  0.004370517626464682),  Sigma(0.00047037649257739277, 0.0003478515117667879)),
			DataRow(100,  60.0,				  Sigma(0.006470755651288166,  0.003000867353579202),  Sigma(0.00047037649257739277, 0.00017148615110263807))
		};

		RunTestSample("tests/data/test_impurities2.config", expected_results);
	}
}
